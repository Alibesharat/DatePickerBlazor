@typeparam TValue
@inherits InputBase<TValue>

<div class="outter-selection form-control">
    <div class="selection">
        <span class="out-selector">
            <span class="plain-selector">
                <select class="dropdown" @onchange="OnChangeday">
                    @foreach (var item in Days)
                    {
                        if (item == _Day)
                        {
                            <option selected="selected" value="@item">@item.ToString("00")</option>

                        }
                        else
                        {
                            <option value="@item">@item.ToString("00")</option>

                        }

                    }

                </select>
            </span>
        </span>
        <span>/</span>
        <span class="out-selector">
            <span class="plain-selector">
                <select class="dropdown" @onchange="OnChangemounth">
                    @foreach (var item in Mounts)
                    {
                        if (item == _Mount)
                        {
                            <option selected="selected" value="@item">@item.ToString("00")</option>

                        }
                        else
                        {
                            <option value="@item">@item.ToString("00")</option>

                        }

                    }

                </select>
            </span>
        </span>
        <span>/</span>
        <span class="out-selector">
            <span class="plain-selector">
                <select class="dropdown" @onchange="OnChangeyear">
                    @foreach (var item in Years)
                    {
                        if (item == _Year)
                        {
                            <option selected="selected" value="@item">@item.ToString("00")</option>

                        }
                        else
                        {
                            <option value="@item">@item.ToString("00")</option>

                        }

                    }

                </select>
            </span>
        </span>

    </div>
</div>

@code {



    [Parameter]
    public int[] Years { get; set; }

    [Parameter]
    public int[] Mounts { get; set; }

    [Parameter]
    public int[] Days { get; set; }





    private void OnChangeyear(ChangeEventArgs args)
    {
        _Year = int.Parse(args.Value.ToString());
        CurrentValueAsString = $"{_Year}/{_Mount}/{_Day}";
    }
    private void OnChangemounth(ChangeEventArgs args)
    {
        _Mount = int.Parse(args.Value.ToString());
        CurrentValueAsString = $"{_Year}/{_Mount}/{_Day}";

    }
    private void OnChangeday(ChangeEventArgs args)
    {
        _Day = int.Parse(args.Value.ToString());
        CurrentValueAsString = $"{_Year}/{_Mount}/{_Day}";

    }

    protected override bool TryParseValueFromString(string value, out TValue result, out string errorMessage)
    {

        var success = PersianDateTimeBindConvertor.TryPresianConvertToDateTime(value, out DateTime parsedValue, out string ValidationMessage);
        if (success)
        {
            result = (TValue)(object)parsedValue;
            errorMessage = null;

            return true;
        }
        else
        {
            result = default;
            errorMessage = ValidationMessage;

            return false;
        }

    }


    private System.Globalization.PersianCalendar pc;

    private int _Year;

    private int _Mount;

    private int _Day;




    protected override void OnInitialized()
    {

        pc = new System.Globalization.PersianCalendar();
        DateTime now = DateTime.Now;
        _Year = pc.GetYear(now);
        _Mount = pc.GetMonth(now);
        _Day = pc.GetDayOfMonth(now);

        if (Years == null || Years.Count() == 0)
        {
            Years = GetYears().ToArray();
        }
        if (Mounts == null || Mounts.Count() == 0)
        {
            Mounts = GetMounths().ToArray();
        }
        if (Days == null || Days.Count() == 0)
        {
            Days = GetDays().ToArray();
        }
        base.OnInitialized();
    }


    private IEnumerable<int> GetYears()
    {

        for (int i = _Year - 80; i <= _Year; i++)
        {
            yield return i;
        }
    }

    private IEnumerable<int> GetMounths()
    {

        for (int i = 1; i <= 12; i++)
        {
            yield return i;
        }
    }

    private IEnumerable<int> GetDays()
    {

        for (int i = 1; i <= 31; i++)
        {
            yield return i;
        }
    }
}
